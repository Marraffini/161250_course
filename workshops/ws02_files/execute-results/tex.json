{
  "hash": "7b2a5f84aa55848f6e21ae776e4e755b",
  "result": {
    "markdown": "---\ntitle: \"Chapter 2 Workshop\"\n---\n\n\n\n# Dataset **`Prestige`**\n\nWe will be using a well-known dataset called `Prestige` from the `car`\tR package.  This dataset deals with prestige ratings of Canadian Occupations. The `Prestige` dataset has 102 rows and 6 columns. The observations are occupations.\n\nThis data frame contains the following columns:\n\n* **education** - Average education of occupational incumbents, years, in 1971.\n\n* **income** - Average income of incumbents, dollars, in 1971.\n\n* **women** - Percentage of incumbents who are women.\n\n*  **prestige** - Pineo-Porter prestige score for occupation, from a social survey conducted in the mid-1960s.\n\n* **census** - Canadian Census occupational code.\n\n*  **type** - Type of occupation. A factor with levels: bc, Blue Collar; prof, Professional, Managerial, and Technical; wc, White Collar. (includes four missing values).\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\nLoad the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\ndata(Prestige)\n```\n:::\n\n\n\n\n# Exercise 2.1 {-}\n\nDraw a bar chart for **type**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\np <- Prestige |> \n  ggplot() +\n  aes(type) + \n  geom_bar()\n\np\n```\n:::\n\n\n\nOr with `plotly` (which works for HTML, not for PDF)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nOr with old-style R plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# or\nlibrary(car)\nbarplot(table(Prestige$type))\n```\n:::\n\n\n\n\n# Exercise 2.2 {-}\n\nDraw a histogram of **prestige**. \n\nBelow demonstrates the flexibility of `ggplot` code. You can specify the `data` argument by piping it into `ggplot`, or by putting it as an argument to `ggplot` or a `geom_`. Likewise, the `aes` information, which determines which variables are used where, can be added as an extra line or specified inside the `ggplot` or `geom-` function. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() +\n  aes(x = prestige) +\n  geom_histogram(bins=10)\n```\n\n```{.r .cell-code}\nggplot(Prestige) +\n  aes(x = prestige) +\n  geom_histogram(bins=10) \n```\n\n```{.r .cell-code}\nggplot() +\n  geom_histogram(\n    data = Prestige,\n    mapping = aes(x = prestige),\n    bins = 10\n    )\n```\n\n```{.r .cell-code}\n# or\n# library(plotly)\n# p <- Prestige |> \n#   ggplot() +\n#   aes(prestige) +\n#   geom_histogram(bins=10)\n# \n# ggplotly(p)\n\n# or\n# hist(Prestige$prestige)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(x = rownames(Prestige), y = prestige) +\n  geom_point() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-8-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nThat's a mess! \n\nWe can tidy it up by ordering the professions according to prestige. First, we move the professions from rownames to a variable. Then, we `fct_reorder` the professions using `prestige`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  rownames_to_column(var = \"profession\") |> \n  mutate(profession = fct_reorder(profession, prestige)) |> \n  ggplot() + \n  aes(x = profession, y = prestige, col = type) +\n  geom_point() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-9-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n# Exercise 2.3 {-}\n\nObtain the summary statistics for **prestige**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(Prestige)\n\nlibrary(psych)\n\ndescribe(Prestige)\n\ndescribeBy(education + income + women + prestige ~ type, \n           data = Prestige)\n```\n:::\n\n\n\n\n# Exercise 2.4 {-}\n\nObtain the boxplot of `prestige ~ type`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() +\n  aes(y=prestige, x=type) +\n  geom_boxplot()\n```\n\n```{.r .cell-code}\n# or\n# library(plotly)\n# p <- Prestige |> ggplot() + \n#   aes(y=prestige, x=type) + geom_boxplot()\n# ggplotly(p)\n\n# or\n# library(lattice)\n# bwplot(prestige ~ type, data=Prestige)\n\n# as violin plots\nPrestige |> \n  ggplot() +\n  aes(y=prestige, x=type) +\n  geom_violin()\n```\n\n```{.r .cell-code}\n# Or put it all together\nPrestige |> \n  ggplot() +\n  aes(y=prestige, x=type) +\n  geom_violin() + \n  geom_boxplot(col = 2, alpha = .2) +\n  geom_jitter(alpha = .2, width = .2, height = 0, colour = 4)\n```\n:::\n\n\n\n\n# Exercise 2.5 {-}\n\nObtain the Empirical Cumulative Distribution Function (ECDF) graphs of **prestige ~ type**:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(prestige, colour=type) +\n  stat_ecdf()\n```\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(prestige) +\n  stat_ecdf() + \n  facet_wrap(~type)\n```\n\n```{.r .cell-code}\n# or\nlibrary(latticeExtra)\necdfplot(~ prestige | type, data = Prestige)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(\n    x = prestige, \n    col = type\n    ) +\n  geom_density(\n    aes(fill = type),\n    alpha = .2\n    ) +\n  geom_rug()\n```\n:::\n\n\n\n\n# Exercise 2.6 {-}\n\nObtain the \\{0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95\\} quantiles of `prestige`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npr <- c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99)\n\nPrestige |> \n  summarise(\n    probs = pr,\n    quants = quantile(prestige, pr)\n    )\n\n# or simply\nquantile(Prestige$prestige, pr)\n```\n:::\n\n\n\n\n# Exercise 2.7 {-}\n\nObtain the scatter plot (with and without marginal boxplots) **prestige vs. education **:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggExtra)\n\np1 <- Prestige |> \n  ggplot() + \n  aes(x=education, y=prestige) +\n  geom_point() + \n  geom_smooth(col = 2) + \n  geom_smooth(method = \"lm\", se = FALSE)\n\nggMarginal(p1, type=\"boxplot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\n\nscatterplot(education ~ prestige, data = Prestige)\n```\n:::\n\n\n\nThe later plot will show prediction interval ribbon while the first plot will show the confidence interval ribbon.\n\n# Exercise 2.8 {-}\n\nObtain the bubble or balloon plot  **prestige vs. education vs. income** (income forming the bubble size):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nPrestige |> \n  ggplot() + \n  aes(x = education, y = prestige, size = income) +\n  geom_point()\n```\n\n```{.r .cell-code}\n# or\n\nlibrary(plotly)\n\np <- Prestige |>\n  ggplot() + \n  aes(x = education, y = prestige, size = income) +\n  geom_point()\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-17-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n# Exercise 2.9 {-}\n\nObtain the contour plot  **prestige vs. education vs. income** :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\nplot_ly(type = 'contour', \n        x = Prestige$education, \n        y = Prestige$income, \n        z = Prestige$prestige)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-18-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nTo add axes labels and titles, try-\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\nplot_ly(\n  Prestige,\n  type = 'contour',\n  x = Prestige$education,\n  y = Prestige$income,\n  z = Prestige$prestige\n) |> layout(\n  title = 'Contour Plot of prestige scores',\n  xaxis = list(title = 'education'),\n  yaxis = list(title = 'income')\n)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\nWe can also define our own function for the contour approximation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modelr)\n\n# make a smooth model\ny.m = loess(prestige ~ education * income, data = Prestige)\n\n# make a regular grid of all combinations of education and income\nmygrid <- Prestige |> \n  data_grid(\n    education = seq_range(education, 50),\n    income = seq_range(income, 50)\n  ) |> \n  # add predicted prestige using the smooth model\n  add_predictions(y.m, var = \"predicted prestige\")\n\n# make ggplot contour plot\np <- mygrid |> \n  ggplot() + \n  aes(x = education, y = income, z = `predicted prestige`) +\n  geom_contour()\n\np\n```\n\n```{.r .cell-code}\n# make a plotly version\nlibrary(plotly)\nggplotly(p)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-20-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# filled contour ggplot\nmygrid |> \n  ggplot() + \n  aes(x=education, y=income, z=`predicted prestige`) +\n  stat_contour_filled()\n```\n\n```{.r .cell-code}\n# or the older-style lattice graphs \n\nlibrary(lattice)\n\ncontourplot(`predicted prestige` ~ education * income, \n            data = mygrid, \n            cuts = 10, region = TRUE,\n            xlab = \"education \", ylab = \"income \")\n```\n\n```{.r .cell-code}\nwireframe(`predicted prestige` ~ education * income, \n          data = mygrid,  \n          cuts = 10, region = TRUE, \n          xlab = \"education \", ylab = \"income \")\n```\n\n```{.r .cell-code}\nlevelplot(`predicted prestige` ~ education * income, \n          data = mygrid,  \n          cuts = 10, region = TRUE, \n          xlab = \"education \", ylab = \"income \")\n```\n\n```{.r .cell-code}\ncloud(`predicted prestige` ~ income * education, \n      data = mygrid) \n```\n:::\n\n\n\n# Exercise 2.10 {-}\n\nObtain the 3-D plot  **prestige vs. education vs. income** :\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\n\nscatter3d(prestige ~ education + income, \n          data = Prestige)\n```\n:::\n\n\n\n# Exercise 2.11 {-}\n\nCreate `prestige ~ education | type` graphs.  That is, `prestige ~ education` grouped by `type` as colours and/or panels.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(x = education, y = prestige, color = type) +\n  geom_point() + \n  facet_wrap(~ type)\n```\n\n```{.r .cell-code}\n# or\n# library(plotly)\n#\n# p <- Prestige |> \n#   ggplot() + \n#   aes(x = education, y = prestige, color = type) +\n#   geom_point() + \n#   facet_wrap(~ type)\n# \n# ggplotly(p)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- Prestige |> \n  ggplot() + \n  aes(x = education, y = prestige, color = type) +\n  geom_point()\n\np\n```\n\n```{.r .cell-code}\n# OR\n#\n# library(plotly)\n# ggplotly(p)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nscatterplot(prestige ~ education | type, \n            data=Prestige)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxyplot(prestige ~ education | type, \n       auto.key = TRUE, \n       data = Prestige)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nxyplot(prestige ~ education, \n       group = type,\n       auto.key = TRUE, \n       data = Prestige)\n```\n:::\n\n\n\n\n<!-- ## Exercise 2.12 {-} -->\n\n<!-- Obtain the letter values and mids. vs spreads plot for `prestige`. -->\n\n\n<!-- You will need the Internet connection to source R code file. -->\n\n<!-- ```{r, echo=FALSE fig.show=\"hide\", results=\"hide\"} -->\n<!-- library(car) -->\n<!-- attach(Prestige) -->\n<!-- source(\"https://www.massey.ac.nz/~kgovinda/eda/lva.R\") -->\n<!-- lva(prestige) -->\n<!-- source(\"https://www.massey.ac.nz/~kgovinda/eda/lval.R\") -->\n<!-- lval(prestige) -->\n<!-- ``` -->\n\n<!-- Plots of letter values grouped by *type* -->\n\n<!-- ```{r, fig.show=\"hide\", results=\"hide\"} -->\n<!-- library(lvplot) -->\n<!-- LVboxplot(prestige~type) -->\n<!-- ``` -->\n\n\n# Exercise 2.12 {-}\n\nTime-series data EDA based on RBNZ house sales data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurl1 <- \"https://www.massey.ac.nz/~anhsmith/data/housesales.RData\"\ndownload.file(url = url1, destfile = \"housesales.RData\")\nload(\"housesales.RData\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(forecast)\nautoplot(housesales)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Dynamic graphing\n# https://rstudio.github.io/dygraphs/index.html\n\nlibrary(dygraphs)\n\ndygraph(housesales) |> \n  dyOptions(drawPoints = TRUE)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-29-1.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\ndygraph(housesales) |> \n  dyOptions(fillGraph=TRUE)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-29-2.pdf){fig-pos='H'}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggseasonplot(housesales)\n```\n\n```{.r .cell-code}\nggsubseriesplot(housesales)\n```\n:::\n\n\n\nSeries Decomposition\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nhousesales |> \n  decompose(type=\"additive\")  |>   \n  forecast::autoplot() + \n  ggtitle(\"\")\n```\n\n```{.r .cell-code}\nhousesales |> \n  decompose(type=\"multiplicative\") |>   \n  forecast::autoplot() + \n  ggtitle(\"\")\n```\n:::\n\n\n\n\nlag & ACF plots\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngglagplot(housesales)\n```\n\n```{.r .cell-code}\ngglagplot(housesales, seasonal=FALSE, lag=1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggAcf(housesales)\n```\n\n```{.r .cell-code}\nggPacf(housesales)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggtsdisplay(housesales)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nMore graphing examples are [here](https://www.massey.ac.nz/~anhsmith/250/exercises/chap02more.R) (R codes file).",
    "supporting": [
      "ws02_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}
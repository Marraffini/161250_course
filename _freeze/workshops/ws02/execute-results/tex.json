{
  "hash": "1d339bd97978068a2b41b0509b4ca1cb",
  "result": {
    "markdown": "---\ntitle: \"Chapter 2 Workshop\"\n---\n\n\n\n# Setting up a Quarto project\n\nIt is a good idea to get into the habit of using Quarto projects, rather than just R scripts. Here is a step-by-step guide to creating a project for your workshops. You don't have to use projects, but they are very useful. \n\n1. Open RStudio. (Optional: click on the little window symbol at the top and select \"Console on Right\")\n\n![](img/console_right.png)\n\n2. If you haven't already, make a directory on your computer where you want to keep your code for this course. \n\n3. Make a new project. Select the \"Project\" button at the top-right of Rstudio, and select \"New Project...\".\n\n![](img/open_project.png)\n\n4. In the pop-up window:\n\n- Select \"New Directory\"\n\n![](img/new_direct.png)\n\n- Select \"Quarto Project\"\n\n![](img/quarto_proj.png)\n\n- Choose your directory via the \"Browse\", and then give the project a name like \"161250_workshops\"\n\n![](img/dir_name.png)\n\n- Finish by clicking on \"Create Project\". \n\nThe project should now be created, and you'll likely have an open \\*.qmd file (something like \"161250_workshops.qmd\") in the top-right window of Rstudio. We want to make a \\*.qmd file for this workshop. \n\n5. Right-click on the qmd tab and select \"Rename\", and rename it \"workshop2.qmd\" or something similar. (Alternatively, just make a new file via the menus: *File > New File > Quarto Document*.)\n\n![](img/rename_qmd.png)\n\nNow you have a document for your Workshop 2 work. You can:\n\n- Write headings with lines beginning with \"#\". \n- Write text in the main part of the document.\n- Make a code chunk for your R code using *Ctrl-Alt-i*. Write R code in the code chunks.\n\nLike so:\n\n![](img/chunk.png)\n\nThere are lots of tutorials online covering the basics of Quarto, and we'll discuss them during our own workshops. Here are a couple for starters:\n\n<https://quarto.org/docs/get-started/hello/rstudio.html>\n\n<https://www.youtube.com/watch?v=c654j7aQjcg>\n\nThere are many advantages of Quarto projects. One is that you can put datasets into the project folder, and they'll be easily accessible within your project, without having to worry about file paths. \n\nYou can easily open a recent past projects via the \"Projects\" button on the top-right of Rstudio. \n\n\n# Dataset **`Prestige`**\n\nAs you work through this workshop, you can copy the code and paste it into a code chunk. Write notes and observations to your self as you go. \n\nWe will be using a well-known dataset called `Prestige` from the `car`\tR package. This dataset deals with prestige ratings of Canadian occupations. The `Prestige` dataset has 102 rows and 6 columns. Each row (or 'observation') is an occupation.\n\nThis data frame contains the following columns:\n\n* `education` - Average education of occupational incumbents, years, in 1971.\n\n* `income` - Average income of incumbents, dollars, in 1971.\n\n* `women` - Percentage of incumbents who are women.\n\n*  `prestige` - Pineo-Porter prestige score for occupation, from a social survey conducted in the mid-1960s.\n\n* `census` - Canadian Census occupational code.\n\n*  `type` - Type of occupation. A factor with levels: bc, Blue Collar; prof, Professional, Managerial, and Technical; wc, White Collar. (includes four missing values).\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n\nFirst we'll load the data. The dataset sits in the `car` package, so you need to load the `car` package first.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\ndata(Prestige)\n```\n:::\n\n\n\n\n# Exercise 2.1 {-}\n\nDraw a bar chart for `type`. These plots show the count or relative frequency of blue collar (`bc`), professional (`prof`), and white collar (`wc`) professions in the dataset. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\np <- Prestige |> \n  ggplot() +\n  aes(type) + \n  geom_bar()\n\np\n```\n:::\n\n\n\nOr with `plotly` (which works for HTML, not for PDF)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-5-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nOr with old-style R plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# or\nlibrary(car)\nbarplot(table(Prestige$type))\n```\n:::\n\n\n\n\n\n# Exercise 2.2 {-}\n\nDraw a histogram of `prestige`. \n\nBelow demonstrates the flexibility of `ggplot` code. You can specify the `data` argument by piping it into `ggplot`, or by putting it as an argument to `ggplot` or a `geom_`. Likewise, the `mapping` or `aes` information, which determines which variables are used where, can be added as an extra line or specified inside the `ggplot` or `geom_` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() +\n  aes(x = prestige) +\n  geom_histogram()\n```\n:::\n\n\n\nNow, this histogram, where the number of bins has been chosen for us, looks a bit \"spiky\" to my eye. You can control the number of bins by adding an argument `bins = 10`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() +\n  aes(x = prestige) +\n  geom_histogram(bins=10)\n```\n:::\n\n\n\n`ggplot` is very flexible as to where you put the data and the `aes` information; all of these methods give the same result.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() +\n  aes(x = prestige) +\n  geom_histogram(bins=10)\n```\n\n```{.r .cell-code}\nggplot(\n  data = Prestige,\n  mapping = aes(x = prestige)\n  ) +\n  geom_histogram(bins=10)\n```\n\n```{.r .cell-code}\nggplot(Prestige) +\n  aes(x = prestige) +\n  geom_histogram(bins=10) \n```\n\n```{.r .cell-code}\nggplot() +\n  geom_histogram(\n    data = Prestige,\n    mapping = aes(x = prestige),\n    bins = 10\n    )\n```\n\n```{.r .cell-code}\n# or\n# library(plotly)\n# p <- Prestige |> \n#   ggplot() +\n#   aes(prestige) +\n#   geom_histogram(bins=10)\n# \n# ggplotly(p)\n\n# or\n# hist(Prestige$prestige)\n```\n:::\n\n\n\nNow let's display the prestige scores for each profession as a dot plot.\n\nNote that I'm including the code-chunk option `#| fig-height: 12` at the beginning of my code chunk so that the plot is big enough to show all the professions without overlap. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |>\n  ggplot() + \n  aes(x = rownames(Prestige), y = prestige) +\n  geom_point() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nWhat a mess! \n\nWe can tidy it up by ordering the professions on the plot according to `prestige`. First, we move the professions from rownames to a variable. Then, we `fct_reorder` the professions using the `prestige` scores. Then, the resulting data gets piped into `ggplot`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  rownames_to_column(var = \"profession\") |> \n  mutate(\n    profession = fct_reorder(profession, prestige)\n    ) |>\n  ggplot() + \n  aes(x = profession, y = prestige, colour = type) +\n  geom_point() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-11-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n# Exercise 2.3 {-}\n\nObtain some summary statistics for `prestige`. There are a few options for this.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(Prestige)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   education          income          women           prestige    \n Min.   : 6.380   Min.   :  611   Min.   : 0.000   Min.   :14.80  \n 1st Qu.: 8.445   1st Qu.: 4106   1st Qu.: 3.592   1st Qu.:35.23  \n Median :10.540   Median : 5930   Median :13.600   Median :43.60  \n Mean   :10.738   Mean   : 6798   Mean   :28.979   Mean   :46.83  \n 3rd Qu.:12.648   3rd Qu.: 8187   3rd Qu.:52.203   3rd Qu.:59.27  \n Max.   :15.970   Max.   :25879   Max.   :97.510   Max.   :87.20  \n     census       type   \n Min.   :1113   bc  :44  \n 1st Qu.:3120   prof:31  \n Median :5135   wc  :23  \n Mean   :5402   NA's: 4  \n 3rd Qu.:8312            \n Max.   :9517            \n```\n:::\n\n```{.r .cell-code}\nlibrary(psych)\n\ndescribe(Prestige)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          vars   n    mean      sd  median trimmed     mad     min      max\neducation    1 102   10.74    2.73   10.54   10.63    3.15    6.38    15.97\nincome       2 102 6797.90 4245.92 5930.50 6161.49 3060.83  611.00 25879.00\nwomen        3 102   28.98   31.72   13.60   24.74   18.73    0.00    97.51\nprestige     4 102   46.83   17.20   43.60   46.20   19.20   14.80    87.20\ncensus       5 102 5401.77 2644.99 5135.00 5393.87 4097.91 1113.00  9517.00\ntype*        6  98    1.79    0.80    2.00    1.74    1.48    1.00     3.00\n             range skew kurtosis     se\neducation     9.59 0.32    -1.03   0.27\nincome    25268.00 2.13     6.29 420.41\nwomen        97.51 0.90    -0.68   3.14\nprestige     72.40 0.33    -0.79   1.70\ncensus     8404.00 0.11    -1.49 261.89\ntype*         2.00 0.40    -1.36   0.08\n```\n:::\n\n```{.r .cell-code}\ndescribeBy(education + income + women + prestige ~ type, \n           data = Prestige)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Descriptive statistics by group \ntype: bc\n          vars  n    mean      sd  median trimmed     mad     min     max\neducation    1 44    8.36    1.16    8.35    8.32    1.14    6.38   10.93\nincome       2 44 5374.14 2004.33 5216.50 5338.56 2275.05 1656.00 8895.00\nwomen        3 44   18.97   26.15    4.72   14.48    7.01    0.00   90.67\nprestige     4 44   35.53   10.02   35.90   35.46   11.34   17.30   54.90\n            range skew kurtosis     se\neducation    4.55 0.34    -0.76   0.18\nincome    7239.00 0.17    -1.00 302.16\nwomen       90.67 1.36     0.51   3.94\nprestige    37.60 0.05    -1.03   1.51\n------------------------------------------------------------ \ntype: prof\n          vars  n     mean      sd  median trimmed     mad     min      max\neducation    1 31    14.08    1.39   14.44   14.16    1.22   11.09    15.97\nincome       2 31 10559.45 5422.82 8865.00 9700.04 3955.58 4614.00 25879.00\nwomen        3 31    25.51   28.37   11.68   21.03   13.86    0.58    96.12\nprestige     4 31    67.85    8.68   68.40   67.34    9.19   53.80    87.20\n             range  skew kurtosis     se\neducation     4.88 -0.47    -0.93   0.25\nincome    21265.00  1.37     1.36 973.97\nwomen        95.54  1.14    -0.04   5.09\nprestige     33.40  0.36    -0.67   1.56\n------------------------------------------------------------ \ntype: wc\n          vars  n    mean      sd  median trimmed     mad     min     max\neducation    1 23   11.02    0.92   11.13   11.03    0.68    9.17   12.79\nincome       2 23 5052.30 1944.32 4741.00 4960.53 2342.51 2448.00 8780.00\nwomen        3 23   52.83   33.11   56.10   53.19   47.77    3.16   97.51\nprestige     4 23   42.24    9.52   41.50   41.61    8.60   26.50   67.50\n            range  skew kurtosis     se\neducation    3.62 -0.20    -0.27   0.19\nincome    6332.00  0.44    -1.18 405.42\nwomen       94.35 -0.10    -1.58   6.90\nprestige    41.00  0.63     0.18   1.98\n```\n:::\n:::\n\n\n\n\n# Exercise 2.4 {-}\n\nMake a boxplot of `prestige ~ type`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() +\n  aes(y=prestige, x=type) +\n  geom_boxplot()\n```\n\n```{.r .cell-code}\n# or\n# library(plotly)\n# p <- Prestige |> ggplot() + \n#   aes(y=prestige, x=type) + geom_boxplot()\n# ggplotly(p)\n\n# or\n# library(lattice)\n# bwplot(prestige ~ type, data=Prestige)\n\n# as violin plots\nPrestige |> \n  ggplot() +\n  aes(y=prestige, x=type) +\n  geom_violin()\n```\n\n```{.r .cell-code}\n# Or put it all together\nPrestige |> \n  ggplot() +\n  aes(y=prestige, x=type) +\n  geom_violin() + \n  geom_boxplot(col = 2, alpha = .2) +\n  geom_jitter(alpha = .2, width = .2, height = 0, colour = 4)\n```\n:::\n\n\n\n\n# Exercise 2.5 {-}\n\nObtain the Empirical Cumulative Distribution Function (ECDF) graphs of `prestige ~ type`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(prestige, colour=type) +\n  stat_ecdf()\n```\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(prestige) +\n  stat_ecdf() + \n  facet_wrap(~type)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(\n    x = prestige, # these aes settings are used\n    col = type    # by both geoms\n    ) +\n  geom_density(\n    aes(fill = type), # the 'fill' aes goes here because \n    alpha = .2        # geom_rug doesn't use 'fill'\n    ) +\n  geom_rug()\n```\n:::\n\n\n\nWith which plot – the ECDF or the density plot – is it easier to compare the distributions of prestige scores among these groups?\n\n# Exercise 2.6 {-}\n\nObtain the \\{0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95\\} quantiles of `prestige`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npr <- c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99)\n\nPrestige |> \n  summarise(\n    probs = pr,\n    quants = quantile(prestige, pr)\n    )\n\n# or simply\nquantile(Prestige$prestige, pr)\n```\n:::\n\n\n\n\n# Exercise 2.7 {-}\n\nObtain the scatter plot (with and without marginal boxplots) **prestige vs. education **:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggExtra)\n\np1 <- Prestige |> \n  ggplot() + \n  aes(x = education, y = prestige) +\n  geom_point() + \n  geom_smooth(col = 2) + \n  geom_smooth(method = \"lm\", se = FALSE)\n\nggMarginal(p1, type=\"boxplot\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(car)\n\nscatterplot(education ~ prestige, data = Prestige)\n```\n:::\n\n\n\nThe later plot will show prediction interval ribbon while the first plot will show the confidence interval ribbon.\n\n# Exercise 2.8 {-}\n\nObtain the bubble or balloon plot  **prestige vs. education vs. income** (income forming the bubble size):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nPrestige |> \n  ggplot() + \n  aes(x = education, y = prestige, size = income) +\n  geom_point()\n```\n\n```{.r .cell-code}\n# or\n\nlibrary(plotly)\n\np <- Prestige |>\n  ggplot() + \n  aes(x = education, y = prestige, size = income) +\n  geom_point()\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-19-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n# Exercise 2.9 {-}\n\nObtain the contour plot  **prestige vs. education vs. income** :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(plotly)\n\nplot_ly(type = 'contour', \n        x = Prestige$education, \n        y = Prestige$income, \n        z = Prestige$prestige)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-20-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\nTo add axes labels and titles, try-\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_ly(\n  Prestige,\n  type = 'contour',\n  x = Prestige$education,\n  y = Prestige$income,\n  z = Prestige$prestige\n) |> layout(\n  title = 'Contour Plot of prestige scores',\n  xaxis = list(title = 'education'),\n  yaxis = list(title = 'income')\n)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-21-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\nWe can also define our own function for the contour approximation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(modelr)\n\n# make a smooth model\ny.m = loess(prestige ~ education * income, data = Prestige)\n\n# make a regular grid of all combinations of education and income\nmygrid <- Prestige |> \n  data_grid(\n    education = seq_range(education, 50),\n    income = seq_range(income, 50)\n  ) |> \n  # add predicted prestige using the smooth model\n  add_predictions(y.m, var = \"predicted prestige\")\n\n# make ggplot contour plot\np <- mygrid |> \n  ggplot() + \n  aes(x = education, y = income, z = `predicted prestige`) +\n  geom_contour()\n\np\n```\n\n```{.r .cell-code}\n# make a plotly version\nlibrary(plotly)\nggplotly(p)\n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-22-2.pdf){fig-pos='H'}\n:::\n\n```{.r .cell-code}\n# filled contour ggplot\nmygrid |> \n  ggplot() + \n  aes(x=education, y=income, z=`predicted prestige`) +\n  stat_contour_filled()\n```\n\n```{.r .cell-code}\n# or the older-style lattice graphs \n\nlibrary(lattice)\n\ncontourplot(`predicted prestige` ~ education * income, \n            data = mygrid, \n            cuts = 10, region = TRUE,\n            xlab = \"education \", ylab = \"income \")\n```\n\n```{.r .cell-code}\nwireframe(`predicted prestige` ~ education * income, \n          data = mygrid,  \n          cuts = 10, region = TRUE, \n          xlab = \"education \", ylab = \"income \")\n```\n\n```{.r .cell-code}\nlevelplot(`predicted prestige` ~ education * income, \n          data = mygrid,  \n          cuts = 10, region = TRUE, \n          xlab = \"education \", ylab = \"income \")\n```\n\n```{.r .cell-code}\ncloud(`predicted prestige` ~ income * education, \n      data = mygrid) \n```\n:::\n\n\n\n# Exercise 2.10 {-}\n\nObtain an interactive 3-D plot of **prestige vs. education vs. income** using `plotly`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_ly(\n  data = Prestige,\n  x = ~education, \n  y = ~income, \n  z = ~prestige) |> \n  add_markers() \n```\n\n::: {.cell-output-display}\n![](ws02_files/figure-pdf/unnamed-chunk-23-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Exercise 2.11 {-}\n\nCreate `prestige ~ education | type` graphs.  That is, `prestige ~ education` grouped by `type` as colours and/or panels.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nPrestige |> \n  ggplot() + \n  aes(x = education, y = prestige, colour = type) +\n  geom_point() + \n  facet_wrap(~ type)\n```\n\n```{.r .cell-code}\n# or\n# library(plotly)\n#\n# p <- Prestige |> \n#   ggplot() + \n#   aes(x = education, y = prestige, color = type) +\n#   geom_point() + \n#   facet_wrap(~ type)\n# \n# ggplotly(p)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np <- Prestige |> \n  ggplot() + \n  aes(x = education, y = prestige, color = type) +\n  geom_point()\n\np\n```\n\n```{.r .cell-code}\n# OR\n#\n# library(plotly)\n# ggplotly(p)\n```\n:::\n\n\n\n\nMore graphing examples are [here](../exercises/Chap2more.R) (R code file).",
    "supporting": [
      "ws02_files\\figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}